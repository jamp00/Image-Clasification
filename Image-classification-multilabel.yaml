AWSTemplateFormatVersion: 2010-09-09
Parameters:
    endPointName: 
        Type: String 
        Default: 'endPoint-Multilabel-5'
    codeRepository:
        Type: String
        Default: https://github.com/jamp00/Image-Clasification.git
    apiGatewayStageName:
        Type: "String"
#        AllowedPattern: "^[a-z0-9]+$"
        Default: "lebels"

Resources:
#------------------ LAMBDA ------------------#
    LambdaFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            FunctionName: Image-classification-multilabel-lambda
            Environment:
                Variables:
                    endPointName: !Ref endPointName
            Handler: 'index.lambda_handler'
            MemorySize: 128
            Runtime: python3.6
            Timeout: 20
            Role: !GetAtt 
                - Role
                - Arn
            Code:
                ZipFile: |
                        import os
                        import boto3
                        import json
                        import base64

                        ENDPOINT_NAME = os.environ['endPointName']
                        CLASSES = '["chair", "handbag", "person", "traffic light", "clock"]'
                        runtime= boto3.client("runtime.sagemaker")

                        def lambda_handler(event, context):

                            file_content = base64.b64decode(event['content'])

                            payload = file_content
                            response = runtime.invoke_endpoint(EndpointName=ENDPOINT_NAME,
                                                               ContentType="application/x-image",
                                                               Body=payload)

                            result = json.loads(response["Body"].read().decode())
                            print(result)
                            predicted_label=[]
                            classes = CLASSES
                            for idx, val in enumerate(classes):
                                print("%s:%f "%(classes[idx], result[idx]), end="")
                                predicted_label += (classes[idx], result[idx])

                            return {
                              "statusCode": 200,
                              "headers": { "content-type": "application/json"},
                              "body":  predicted_label
                        }

#------------------ LOGS GROUPS ------------------#
    LogGroups:
       Type: AWS::Logs::LogGroup
       DeletionPolicy: Delete
       Properties:
         LogGroupName: 
          !Join
            - ''
            - - '/aws/'
              - !Ref LambdaFunction
         RetentionInDays: 5

#------------------ ROLE ------------------#
    Role:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: Image-classification-multilabel-Role
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                          - lambda.amazonaws.com
                      Action:
                      - sts:AssumeRole
            Policies:
                - PolicyDocument:
                    Statement:
                      - Action:
                          - 'sagemaker:InvokeEndpoint'
                        Effect: Allow
                        Resource: '*'
                    Version: 2012-10-17
                  PolicyName: LambdaInvokeEndpoint


#------------------ API GATEWAY ------------------#
    RestApi:
        Type: 'AWS::ApiGateway::RestApi'
        Properties:
            EndpointConfiguration:
                Types:
                    - REGIONAL
            Name: Image-classification-multilabel-RestApi
            BinaryMediaTypes:
                - 'image/jpeg'
                - 'image/jpg'
                - 'image/png'

    Resource:
        Type: 'AWS::ApiGateway::Resource'
        Properties:
          ParentId: !GetAtt 
            - RestApi
            - RootResourceId
          RestApiId: !Ref RestApi
          PathPart: 'Five'

    Method:
        Type: 'AWS::ApiGateway::Method'
        Properties:
            ResourceId: !Ref Resource
            RestApiId: !Ref RestApi
            AuthorizationType: none
            HttpMethod: POST
            MethodResponses: 
                - ResponseModels:
                    application/json: 'Empty'
                  StatusCode: '200'
            Integration:
                Type: AWS
                IntegrationHttpMethod: POST
                Uri: !Join 
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !GetAtt 
                      - LambdaFunction
                      - Arn
                    - /invocations
                PassthroughBehavior: WHEN_NO_TEMPLATES 
                RequestTemplates:
                    image/jpeg: '{"content": "$input.body"}'
                    image/jpg: '{"content": "$input.body"}'
                    image/png: '{"content": "$input.body"}'
                IntegrationResponses: 
                    - StatusCode: '200' 
                      ResponseTemplates: 
                        application/json: ''

    Stage:
        Type: 'AWS::ApiGateway::Stage'
        Properties:
          RestApiId: !Ref RestApi
          DeploymentId: !Ref Deployment
          StageName: 'labels'

    Permission:
        Type: 'AWS::Lambda::Permission'
        Properties:
          FunctionName: !GetAtt LambdaFunction.Arn
          Action: 'lambda:InvokeFunction'
          Principal: apigateway.amazonaws.com
          SourceArn: !Join 
            - ''
            - - 'arn:aws:execute-api:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref RestApi
              - /*

    Deployment:
        Type: 'AWS::ApiGateway::Deployment'
        DependsOn:
          - Method
        Properties:
          RestApiId: !Ref RestApi


#------------------ NOTEBOOK ------------------#
    NotebookInstance:
        Type: AWS::SageMaker::NotebookInstance
        Properties:
            NotebookInstanceName: 'Image-classification-multilabel-NotebookInstance'
            InstanceType: "ml.t2.medium"
            RoleArn: !GetAtt ExecutionRole.Arn
            DefaultCodeRepository: !Ref codeRepository
            VolumeSizeInGB: 20
    
    ExecutionRole: 
        Type: AWS::IAM::Role
        Properties: 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                      Effect: "Allow"
                      Principal: 
                        Service: 
                          - "sagemaker.amazonaws.com"
                      Action: 
                        - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
            Policies:
              - 
                PolicyName: "NotebookInstance_s3_access"
                PolicyDocument: 
                  Version: "2012-10-17"
                  Statement: 
                    - 
                      Effect: "Allow"
                      Action:
                        - "s3:GetObject"
                        - "s3:PutObject"
                        - "s3:DeleteObject"
                        - "s3:ListBucket"
                        - "s3:PutBucketPolicy"
                        - "s3:DeleteBucket"
                        - "s3:ListBucket"
                      Resource: "arn:aws:s3:::*"              
# END NOTEBOOK ----------------------------------------------------------











